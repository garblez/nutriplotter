import csv


def beautify(entry):
    newentry = entry.strip().lower()
    newentry = newentry.replace("'", "")
    newentry = newentry.replace("\"", "")
    if entry.strip() == "N" or entry.strip() == "Tr" or entry.strip() == "":
        newentry = "0"
    return newentry


# specific IDs of foods, used to create a curated list of food items. Use an empty array to get all food items.
desired_ids = [
    8, 9, 10, 12, 16, 17, 20, 25, 26, 29, 30, 31, 32, 35, 36, 37, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60,
    61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 92, 93, 94, 95, 96, 97, 100,
    101, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 135,
    136, 137, 139, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 155, 157, 159, 160, 161, 163, 164, 165, 167, 168,
    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 199, 200,
    203, 204, 205, 208, 209, 210, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233,
    234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 262, 263, 264,
    265, 266, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 293, 294, 295, 296,
    297, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 347, 349, 351, 353, 370, 371, 372, 373,
    377, 379, 380, 389, 390, 391, 395, 398, 399, 400, 417, 418, 419, 420, 449, 450, 451, 452, 453, 454, 455, 456, 457,
    458, 459, 461, 462, 463, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
    486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 528, 529, 530, 531, 532, 534, 535, 536, 538,
    539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566,
    567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
    593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
    616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
    639, 640, 641, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676,
    677, 678, 679, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 703, 705, 706, 707, 708,
    710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738,
    739, 740, 741, 742, 743, 744, 745, 747, 754, 756, 762, 764, 765, 766, 767, 768, 769, 770, 775, 776, 777, 778, 779,
    781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807,
    808, 821, 822, 826, 827, 828, 829, 830, 832, 833, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855,
    856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880,
    881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913,
    914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
    937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
    960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
    983, 984, 985, 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
    1008, 1009, 1010, 1011, 1012, 1013, 1014, 1025, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041,
    1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1063, 1068, 1069, 1070, 1071, 1075,
    1076, 1077, 1078, 1085, 1087, 1088, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1105, 1106, 1108,
    1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1128, 1129, 1130, 1131,
    1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152,
    1154, 1155, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
    1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1202, 1203, 1205, 1206, 1207, 1208, 1211, 1212, 1213, 1214, 1215,
    1219, 1220, 1222, 1224, 1229, 1230, 1231, 1239, 1240, 1241, 1246, 1247, 1248, 1256, 1257, 1258, 1259, 1260, 1261,
    1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
    1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
    1304, 1312, 1313, 1314, 1315, 1320, 1322, 1323, 1324, 1329, 1330, 1332, 1333, 1354, 1369, 1370, 1373, 1374, 1375,
    1376, 1377, 1378, 1381, 1382, 1384, 1385, 1386, 1387, 1391, 1392, 1402, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
    1411, 1416, 1417, 1418, 1419, 1420, 1421, 1424, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
    1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1456, 1457, 1458, 1459, 1462, 1463, 1464,
    1466, 1467, 1468, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
    1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1500, 1501, 1502, 1503, 1504, 1507, 1508,
    1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1530,
    1531, 1532, 1533, 1535, 1536, 1537, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
    1553, 1554, 1555, 1556, 1559, 1560, 1561, 1562, 1567, 1568, 1569, 1570, 1571, 1573, 1575, 1578, 1580, 1581, 1582,
    1592, 1594, 1597, 1598, 1600, 1601, 1602, 1603, 1604, 1608, 1609, 1610, 1612, 1613, 1614, 1615, 1616, 1623, 1624,
    1625, 1627, 1628, 1629, 1630, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
    1656, 1657, 1658, 1659, 1661, 1662, 1665, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
    1681, 1682, 1683, 1684, 1685, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1699, 1700, 1702, 1703, 1704,
    1705, 1706, 1720, 1722, 1723, 1724, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
    1739, 1740, 1741, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1753, 1754, 1755, 1756, 1757, 1758, 1760, 1761,
    1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
    1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
    1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
    1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1835, 1836, 1838, 1839, 1840, 1841, 1842, 1843,
    1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1863, 1864, 1865, 1866, 1867, 1868,
    1870, 1871, 1872, 1873, 1874, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
    1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1909, 1912, 1913, 1914, 1915, 1916,
    1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
    1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
    1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
    1995, 1997, 1998, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2024, 2026, 2027, 2028, 2029, 2030, 2031,
    2032, 2033, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2045, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
    2055, 2056, 2057, 2058, 2059, 2060, 2061, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2084, 2085, 2087,
    2088, 2089, 2090, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2106, 2107, 2110, 2112, 2113, 2114, 2115, 2116, 2119,
    2120, 2121, 2124, 2125, 2126, 2128, 2129, 2132, 2133, 2136, 2137, 2138, 2139, 2143, 2144, 2145, 2146, 2147, 2148,
    2149, 2150, 2151, 2152, 2153, 2156, 2157, 2158, 2159, 2160, 2163, 2164, 2165, 2166, 2169, 2170, 2171, 2172, 2175,
    2176, 2179, 2180, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2191, 2192, 2195, 2196, 2197, 2198, 2199, 2201, 2202,
    2203, 2204, 2205, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
    2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2241, 2242,
    2243, 2244, 2245, 2246, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2259, 2260, 2261, 2262, 2263,
    2266, 2267, 2268, 2269, 2271, 2272, 2276, 2277, 2278, 2283, 2284, 2285, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
    2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2322, 2323, 2324, 2325, 2326, 2327, 2333, 2335, 2341, 2345,
    2346, 2347, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2361, 2363, 2365, 2366, 2367, 2368, 2370, 2371,
    2372, 2374, 2375, 2378, 2380, 2381, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,
    2398, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2409, 2410, 2414, 2415, 2416, 2419, 2420, 2421, 2422, 2424,
    2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2441, 2442, 2443, 2444,
    2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2459, 2460, 2461, 2462, 2463, 2464, 2472,
    2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2487, 2488, 2489, 2490, 2491, 2492,
    2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2509, 2510, 2511, 2512,
    2514, 2515, 2517, 2518, 2520, 2521, 2522, 2523, 2524, 2525, 2531, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541,
    2542, 2543, 2545, 2546, 2547, 2549, 2554, 2555, 2556, 2558, 2559, 2560, 2563, 2564, 2566, 2567, 2568, 2569, 2573,
    2575, 2576, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2615, 2616, 2618, 2619, 2620, 2621, 2622,
    2623, 2625, 2626, 2628, 2630, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2650,
    2651, 2652, 2653, 2655, 2656, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2667, 2668, 2669, 2670, 2671, 2672,
    2674, 2675, 2676, 2678, 2679, 2680, 2681, 2682, 2683, 2685, 2689, 2690, 2692, 2693, 2694, 2695, 2696, 2697, 2698,
    2699, 2700, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2714, 2715, 2729, 2730, 2731, 2732, 2733, 2737,
    2738, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2759, 2760,
    2765, 2766, 2767, 2773, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2784, 2785, 2786, 2787, 2788, 2791, 2792, 2793,
    2795, 2796, 2797, 2798, 2800, 2802, 2803, 2804, 2805, 2806, 2808, 2809, 2810, 2813, 2814, 2817, 2818, 2819, 2820,
    2821, 2822, 2823, 2824, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2840, 2842, 2843,
    2845, 2846, 2847, 2848, 2850, 2853, 2854, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2871,
    2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897,
    2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913
]


# Returns True if the passed row number is one of the desired ids entered in the above array
def get_only_desired_ids(rownum):
    if rownum in desired_ids:
        return True
    return False


filenames = ["db", "dbinorg", "dbvits"]
if desired_ids:
    for i in range(len(filenames)):
        # Add suffix to use full dataset when using desired ids
        filenames[i] = filenames[i] + "Full"

# Get the following nutrient scores from DB:
# name, calories, carbs, fats, protein, sugar, saturatedfat, fibre, omega3, group, calcium, vita, vitb1, vitb9, vitc
macro_array = []
with open(filenames[0]+".csv") as csvfile:
    readCSV = csv.reader(csvfile, delimiter=',')
    bigtext = "db.insert(["
    linenum = 0
    for row in readCSV:
        if linenum >= 3:
            if get_only_desired_ids(linenum):
                totalfibre = (float(beautify(row[24])) + float(beautify(row[25])))
                totalfibre = "%.2f" % round(totalfibre,2)

                macro_dict = {
                    "name": beautify(row[1]),
                    "calories": beautify(row[12]),
                    "carbs": beautify(row[11]),
                    "fats": beautify(row[10]),
                    "protein": beautify(row[9]),
                    "sugar": beautify(row[16]),
                    "satfat": beautify(row[27]),
                    "fibre": totalfibre,
                    "omega3": beautify(row[31]),
                    "group": beautify(row[3])
                }
                macro_array.append(macro_dict)
        linenum += 1

inorganics_array = []
with open(filenames[1]+".csv") as csvfileinorg:
    readCSVinorg = csv.reader(csvfileinorg, delimiter=',')
    linenum = 0
    for row in readCSVinorg:
        if linenum >= 3:
            if get_only_desired_ids(linenum):

                inorganics_dict = {
                    "calcium": beautify(row[9]),
                }
                inorganics_array.append(inorganics_dict)
        linenum += 1

vitamin_array = []
with open(filenames[2]+".csv") as csvfilevits:
    readCSVvits = csv.reader(csvfilevits, delimiter=',')
    linenum = 0
    for row in readCSVvits:
        if linenum >= 3:
            if get_only_desired_ids(linenum):
                totalvitA = (float(beautify(row[7])) + float(beautify(row[8])))
                totalvitA = "%.2f" % round(totalvitA, 2)

                vitamin_dict = {
                    "vitA": totalvitA,
                    "vitB1": beautify(row[13]),
                    "vitB9": beautify(row[20]),
                    "vitC": beautify(row[23])
                }
                vitamin_array.append(vitamin_dict)
        linenum += 1

food_array = []
# Merge all dicts (per food) together
for i in range(len(macro_array)):
    food_array.append({**macro_array[i], **inorganics_array[i], **vitamin_array[i]})

# Write beautified items to output files
# populateDatabase
with open('populateNameList.js', 'w') as output:
    output.write("/*\n"
                 "Populates a local JSON array with every food's name.\n"
                 "*/\n\n"
                 "import React from 'react';\n"
                 "import { Platform} from 'react-native';\n\n"
                 "export default class PopulateDatabase extends React.Component {\n"
                 "	constructor(){\n"
                 "		super();\n\n"
                 "global.nameList = [\n\n")

    # To prevent a trailing comma (JSON doesn't like these) we put a comma above every food, except for the first food
    first_element = True
    for food in food_array:
        if first_element:
            first_element = False
        else:
            output.write(",\n")
        output.write("  \"" + food["name"] + "\"")
    output.write("\n]}}\n")

# populateNameList
with open('populateDatabase.js', 'w') as output:
    output.write("/*\n"
                 "Populates a mongodb database with all foods and their nutritional info\n"
                 "*/\n\n"
                 "import React from 'react';\n"
                 "import { Platform} from 'react-native';\n\n"
                 "var Datastore = require('react-native-local-mongodb'),\n"
                 "db = new Datastore({ filename: 'foods', autoload: true });\n\n"
                 "export default class PopulateDatabase extends React.Component {\n"
                 "	constructor(){\n"
                 "		super();\n\n"
                 "		//db.remove({}, { multi: true }, function (err, numRemoved) {\n"
                 "		//});\n\n"
                 "db.insert([")

    first_element = True
    for food in food_array:
        if first_element:
            first_element = False
        else:
            output.write(",\n")
        output.write("{\n")

        # The name and group values are strings, so need to be treated specially
        for key in food.keys():
            if key is "name":
                output.write("  _id: \"" + food["name"] + "\",\n")
            elif key is "group":
                output.write("  group: \"" + food["group"] + "\",\n")
            else:
                output.write("  " + key + ": " + food[key] + ",\n")
        output.write("}\n")
    output.write("], function (err, newDocs) {\n"
                 "		console.log('Errors: ' + err);\n"
                 "		}); \n"
                 "	}\n"
                 "}")

# populateArray
with open('populateArray.js', 'w') as output:
    output.write("/*\n"
                 "Populates a local JSON array with every food and their nutritional info\n"
                 "*/\n\n"
                 "import React from 'react';\n"
                 "import { Platform} from 'react-native';\n\n"
                 "export default class PopulateDatabase extends React.Component {\n"
                 "	constructor(){\n"
                 "		super();\n\n"
                 "global.foods = {\n\n")

    first_element = True
    for food in food_array:
        if first_element:
            first_element = False
        else:
            output.write(",\n")

        output.write("\"" + food["name"] + "\": {\n")
        for key in food.keys():
            if key is "name" or key is "group":
                output.write("  \"" + key + "\": \"" + food[key] + "\",\n")
            else:
                output.write("  \"" + key + "\": " + food[key] + ",\n")
        output.write("}\n")
    output.write("}}}\n")

print("Output written to files. Please move the populateArray.js and populateNameList.js files to the "
      "./nutriplotterapp directory.")
print("(NOT RECOMMENDED:) If you want to update the mongodb DB with the same subset of foods, also copy the "
      "populateDatabase.js file. This will likely cause old versions of the app to crash as it may refer to foods that "
      "no longer exist.")
